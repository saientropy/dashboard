generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  emailVerified DateTime?
  name          String?
  image         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  accounts      Account[]
  sessions      Session[]
  whoopTokens   WhoopToken?
  stravaTokens  StravaToken?
  otfCredential OtfCredential?
  workouts      Workout[]
  hrvDailies    HrvDaily[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model WhoopToken {
  id            String   @id @default(cuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id])
  accessToken   String
  refreshToken  String
  scope         String
  tokenType     String
  expiresAt     DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Workout {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  whoopId       Int      @unique
  start         DateTime
  end           DateTime
  avgHr         Int?
  maxHr         Int?
  hrr2min       Int?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model HrvDaily {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  date          DateTime @db.Date
  rmssd         Float
  rhr           Int?
  source        String   // whoop or computed
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  @@unique([userId, date])
}

model StravaToken {
  id            String   @id @default(cuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id])
  accessToken   String
  refreshToken  String
  athleteId     Int
  expiresAt     DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model OtfCredential {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  usernameE String   // encrypted base64
  passwordE String   // encrypted base64
  iv        String   // base64 IV for AES-GCM
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}


